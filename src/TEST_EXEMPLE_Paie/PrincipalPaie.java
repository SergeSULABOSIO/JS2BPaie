/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TEST_EXEMPLE_Paie;

import ICONES.Icones;
import SOURCES.CallBack_Paie.EcouteurPaie;
import SOURCES.UI_Paie.PanelPaie;
import SOURCES.Utilitaires_Paie.DataPaie;
import SOURCES.Utilitaires_Paie.ParametreFichesDePaie;
import SOURCES.Utilitaires_Paie.SortiesFichesDePaies;
import SOURCES.Utilitaires_Paie.UtilPaie;
import Source.Callbacks.ConstructeurCriteres;
import Source.Callbacks.EcouteurNavigateurPages;
import Source.Interface.InterfaceAgent;
import Source.Interface.InterfaceExercice;
import Source.Interface.InterfaceFiche;
import Source.Interface.InterfaceMonnaie;
import Source.Interface.InterfaceUtilisateur;
import Source.Objet.Agent;
import Source.Objet.CouleurBasique;
import Source.Objet.Entreprise;
import Source.Objet.Exercice;
import Source.Objet.Fiche;
import Source.Objet.Monnaie;
import Source.Objet.UtilObjet;
import Source.Objet.Utilisateur;
import Source.UI.NavigateurPages;
import Sources.CHAMP_LOCAL;
import Sources.PROPRIETE;
import Sources.UI.JS2BPanelPropriete;
import static java.lang.Thread.sleep;
import java.util.Date;
import java.util.Vector;

/**
 *
 * @author HP Pavilion
 */
public class PrincipalPaie extends javax.swing.JFrame {

    /**
     * Creates new form TEST_Principal
     */
    public Entreprise entreprise = new Entreprise(1, "ECOLE CARESIENNE DE KINSHASA", "7e Rue Limeté Industrielle, Kinshasa/RDC", "+243844803514", "infos@cartesien.org", "wwww.cartesien.org", "logo.png", "RCCM/KD/CD/4513", "IDN00111454", "IMP00124100", "Equity Bank Congo SA", "AIB RDC Sarl", "000000121212400", "IBANNN0012", "SWIFTCDK");
    public Exercice exercice = new Exercice(12, entreprise.getId(), 1, "Année Scolaire 2019-2020", new Date(), UtilPaie.getDate_AjouterAnnee(new Date(), 1), UtilObjet.getSignature(), InterfaceExercice.BETA_EXISTANT);
    public Utilisateur utilisateur = new Utilisateur(1, entreprise.getId(), "SULA", "BOSIO", "SERGE", "sulabosiog@gmail.com", "abc", InterfaceUtilisateur.TYPE_ADMIN, UtilPaie.generateSignature(), InterfaceUtilisateur.DROIT_CONTROLER, InterfaceUtilisateur.DROIT_CONTROLER, InterfaceUtilisateur.DROIT_CONTROLER, InterfaceUtilisateur.DROIT_CONTROLER, InterfaceUtilisateur.DROIT_CONTROLER, InterfaceUtilisateur.DROIT_CONTROLER, InterfaceUtilisateur.DROIT_CONTROLER, InterfaceUtilisateur.BETA_EXISTANT);
    public Monnaie monnaie_USD = new Monnaie(20, entreprise.getId(), utilisateur.getId(), exercice.getId(), "Dollars Américains", "$", InterfaceMonnaie.NATURE_MONNAIE_ETRANGERE, 1620, UtilPaie.generateSignature(), InterfaceMonnaie.BETA_EXISTANT);
    public Monnaie monnaie_CDF = new Monnaie(21, entreprise.getId(), utilisateur.getId(), exercice.getId(), "Francs Congolais", "Fc", InterfaceMonnaie.NATURE_MONNAIE_LOCALE, 1, UtilPaie.generateSignature(), InterfaceMonnaie.BETA_EXISTANT);
    public Agent defaultAgent = new Agent(10, entreprise.getId(), utilisateur.getId(), exercice.getId(), "SULA", "BOSIO", "Serge", InterfaceAgent.SEXE_MASCULIN, InterfaceAgent.NIVEAU_ETUDE_LICENCIE, UtilPaie.generateSignature(), InterfaceAgent.CATEGORIE_SECONDAIRE, InterfaceAgent.BETA_EXISTANT);

    public Vector<Monnaie> monnaies = new Vector<>();
    public Vector<Agent> agents = new Vector<>();

    public Vector<Fiche> listeFiches = new Vector<>();

    public PanelPaie panel = null;

    public Icones icones;

    public PrincipalPaie() {
        initComponents();
        icones = new Icones();
        this.setIconImage(icones.getAdresse_03().getImage());
        //Rien à faire
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        tabPrincipal = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Ouvrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(622, Short.MAX_VALUE))
            .addComponent(tabPrincipal)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ouvrir();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalPaie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalPaie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalPaie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalPaie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalPaie().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTabbedPane tabPrincipal;
    // End of variables declaration//GEN-END:variables

    public void initParametres() {
        ParametreFichesDePaie parametresTresorerie = getParametres();

        panel = new PanelPaie(new CouleurBasique(), null, tabPrincipal, new DataPaie(parametresTresorerie), new EcouteurPaie() {
            @Override
            public void onDetruitTout(int idExercice) {
                System.out.println("ON DETRUIT TOUTES LES FICHES DE PAIE DE L'EXERCICE " + idExercice);
            }

            @Override
            public void onDetruitElement(int idElement, long signature) {
                System.out.println("ON DETRUIT TOUTES LA FICHE " + idElement);
            }

            @Override
            public void onEnregistre(SortiesFichesDePaies sortiesFichesDePaies) {
                //Ce que le système devra faire lorsque l'on clique sur le bouton ENREGISTRER

                Thread th = new Thread() {
                    @Override
                    public void run() {
                        try {
                            sortiesFichesDePaies.getEcouteurEnregistrement().onUploading("Chargement...");
                            sleep(10);

                            sortiesFichesDePaies.getListeFichesDePaie().forEach((Ofiche) -> {
                                if (Ofiche.getBeta() == InterfaceFiche.BETA_MODIFIE || Ofiche.getBeta() == InterfaceFiche.BETA_NOUVEAU) {
                                    System.out.println(" * " + Ofiche.toString());

                                    //Après enregistrement
                                    Ofiche.setId(new Date().getSeconds());
                                    Ofiche.setBeta(InterfaceFiche.BETA_EXISTANT);
                                }
                            });

                            sortiesFichesDePaies.getEcouteurEnregistrement().onDone("Enregistré!");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                };
                th.start();

            }
        });
    }

    public void initDonnees() {
        listeFiches.removeAllElements();
        listeFiches.addElement(new Fiche(12, entreprise.getId(), utilisateur.getId(), exercice.getId(), monnaie_USD.getId(), defaultAgent.getId(), InterfaceAgent.CATEGORIE_SECONDAIRE, 2500, 120, 250, 40, 90, 35, 25, 0, 5, 100, 0, new Date(), UtilPaie.getDateFrancais_Mois(new Date()), UtilObjet.getSignature(), InterfaceAgent.BETA_EXISTANT));
    }
    
    private void chercherPaies(String motCle, int taillePage, JS2BPanelPropriete criteresAvances) {
        int index = 0;
        for (Fiche ee : listeFiches) {
            if (index == taillePage) {
                break;
            }
            boolean checkCritere = checkCriteresPaie(motCle, ee, criteresAvances);
            index++;
        }
    }
    
    public boolean checkCriteresPaie(String motCle, Object data, JS2BPanelPropriete jsbpp) {
        Fiche paie = (Fiche) data;
        boolean repMotCle = panel.search_verifier_motcle(paie, motCle);
        if (repMotCle == false) {
            return false;
        }
        boolean repCategorie = false;
        boolean repMois = false;
        boolean repPeriode = false;
                
        if (jsbpp != null) {
            PROPRIETE propDateA = jsbpp.getPropriete("A partir du");
            PROPRIETE propDateB = jsbpp.getPropriete("Jusqu'au");
            repPeriode = panel.search_verifier_periode(paie, (Date) propDateA.getValeurSelectionne(), (Date) propDateB.getValeurSelectionne());
            if (repPeriode == false) {
                return false;
            }
            
            PROPRIETE propCategorie = jsbpp.getPropriete("Catégorie d'agents");
            repCategorie = panel.search_verifier_categorie(paie, panel.getCategorie(propCategorie.getValeurSelectionne()+""));
            
            PROPRIETE propMois = jsbpp.getPropriete("Paie du mois de");
            repMois = panel.search_verifier_mois(paie, propMois.getValeurSelectionne() + "");
            
            //System.out.println("Categorie:" + idCategorie+", Mois:" + repMois+", Periode:" + repPeriode);
        } else {
            repCategorie = true;
            repMois = true;
            repPeriode = true;
        }
        if (repMotCle == true && repCategorie == true && repMois == true && repPeriode == true) {
            panel.setDonneesFichePaie(paie);
            return true;
        } else {
            panel.setDonneesFichePaie(null);
            return false;
        }
    }

    private void ouvrir() {
        initParametres();
        initDonnees();

        if (panel != null) {
            NavigateurPages navigateurPagesPaie = panel.getNavigateurPagesFichePaie();
            navigateurPagesPaie.initialiser(this, new EcouteurNavigateurPages() {
                @Override
                public void onRecharge(String motCle, int pageActuelle, int taillePage, JS2BPanelPropriete criteresAvances) {
                    new Thread() {
                        public void run() {
                            //System.out.println("RECHARGE ENCAISSEMENT...");
                            navigateurPagesPaie.setInfos(100, 10);
                            navigateurPagesPaie.patienter(true, "Chargement...");
                            panel.reiniliserFichePaie();
                            chercherPaies(motCle, taillePage, criteresAvances);
                        }
                    }.start();
                }
            }, new ConstructeurCriteres() {
                @Override
                public JS2BPanelPropriete onInitialise() {
                    JS2BPanelPropriete panProp = new JS2BPanelPropriete(icones.getFiltrer_01(), "Critères avancés", true);
                    panProp.viderListe();

                    panProp.AjouterPropriete(new CHAMP_LOCAL(icones.getCalendrier_01(), "A partir du", "du", null, UtilPaie.getDate_CeMatin(new Date()), PROPRIETE.TYPE_CHOIX_DATE), 0);
                    panProp.AjouterPropriete(new CHAMP_LOCAL(icones.getCalendrier_01(), "Jusqu'au", "Au", null, UtilPaie.getDate_ZeroHeure(new Date()), PROPRIETE.TYPE_CHOIX_DATE), 0);

                    //Critres Monnaie
                    Vector listeCategories = new Vector();
                    listeCategories.add("TOUTES");
                    listeCategories.add("ADMINISTRATION_1");
                    listeCategories.add("ADMINISTRATION_2");
                    listeCategories.add("MATERNELLE");
                    listeCategories.add("PARTIEL");
                    listeCategories.add("PRIMAIRE");
                    listeCategories.add("PRIME");
                    listeCategories.add("SECONDAIRE");
                    listeCategories.add("SURVEILLANT");
                    panProp.AjouterPropriete(new CHAMP_LOCAL(icones.getTaxes_01(), "Catégorie d'agents", "Monnaie", listeCategories, "", PROPRIETE.TYPE_CHOIX_LISTE), 0);

                    //Critres Revenu
                    Vector listeMois = new Vector();
                    listeMois.add("TOUS");
                    for (String Omois : UtilPaie.getListeMois(exercice.getDebut(), exercice.getFin())) {
                        listeMois.add(Omois);
                    }
                    panProp.AjouterPropriete(new CHAMP_LOCAL(icones.getCalendrier_01(), "Paie du mois de", "mois", listeMois, "", PROPRIETE.TYPE_CHOIX_LISTE), 0);

                    return panProp;
                }
            });
            //Chargement du gestionnaire sur l'onglet
            tabPrincipal.addTab("Gestionnaire de paie", panel);
            tabPrincipal.setSelectedComponent(panel);

            navigateurPagesPaie.criteresActuels_activer();
        }
    }

    private ParametreFichesDePaie getParametres() {
        //Les types des monnaies
        monnaies.removeAllElements();
        monnaies.addElement(monnaie_USD);
        monnaies.addElement(monnaie_CDF);

        //Les types des ragents
        agents.removeAllElements();
        agents.addElement(defaultAgent);

        return new ParametreFichesDePaie(utilisateur, entreprise, exercice, agents, monnaies);
    }
}
